{
    "buildInfo": {
        "rustc": {
            "version": "1.80.1",
            "commitHash": "3f5fd8dd41153bc5fdca9427e9e05be2c767ba23",
            "commitDate": "2024-08-06",
            "channel": "Stable",
            "short": "rustc 1.80.1 (3f5fd8dd4 2024-08-06)"
        },
        "contractCrate": {
            "name": "scratch-game",
            "version": "0.1.0"
        },
        "framework": {
            "name": "multiversx-sc",
            "version": "0.55.0"
        }
    },
    "name": "ScratchGameSc",
    "constructor": {
        "inputs": [
            {
                "name": "token",
                "type": "TokenIdentifier"
            },
            {
                "name": "minimum_amount",
                "type": "BigUint"
            },
            {
                "name": "maximum_amount",
                "type": "BigUint"
            }
        ],
        "outputs": []
    },
    "upgradeConstructor": {
        "inputs": [],
        "outputs": []
    },
    "endpoints": [
        {
            "docs": [
                "Buys a scratch card with the paid amount.",
                "",
                "- The amount must be within the minimum and maximum amounts set.",
                "- The token must be the same as the one set.",
                "- The smart contract must not be paused.",
                "- The treasury address must be set in order to decide the winnings.",
                "",
                "For now, it just returns the amount played."
            ],
            "name": "testBuy",
            "mutability": "mutable",
            "payableInTokens": [
                "*"
            ],
            "inputs": [
                {
                    "name": "player",
                    "type": "Address"
                }
            ],
            "outputs": []
        },
        {
            "docs": [
                "Returns all the games played from the latest to the oldest.",
                "",
                "Optional arguments:",
                "- `opt_player`: If set, only returns the games played by the specified player. Otherwise, returns all games.",
                "- `opt_max_results`: If set, limits the number of games returned. Otherwise, returns the latest 50 games.",
                "",
                "The returned type is a Game Structure, which contains the following fields:",
                "- `id`: The game's unique identifier.",
                "- `player`: The player's address.",
                "- `amount_played`: The amount played in the game.",
                "- `amount_won`: The amount won in the game. If the game falied, this field is `None`.",
                "- `timestamp`: The timestamp when the game was played."
            ],
            "name": "getGames",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "opt_player",
                    "type": "optional<Address>",
                    "multi_arg": true
                },
                {
                    "name": "opt_max_results",
                    "type": "optional<u32>",
                    "multi_arg": true
                }
            ],
            "outputs": [
                {
                    "type": "variadic<Game>",
                    "multi_result": true
                }
            ],
            "allow_multiple_var_args": true
        },
        {
            "name": "getId",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "u64"
                }
            ]
        },
        {
            "name": "setToken",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "token",
                    "type": "TokenIdentifier"
                }
            ],
            "outputs": []
        },
        {
            "name": "getToken",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "TokenIdentifier"
                }
            ]
        },
        {
            "name": "setMinimumAmount",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "amount",
                    "type": "BigUint"
                }
            ],
            "outputs": []
        },
        {
            "name": "setMaximumAmount",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "amount",
                    "type": "BigUint"
                }
            ],
            "outputs": []
        },
        {
            "name": "setTreasuryAddress",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "treasury_address",
                    "type": "Address"
                }
            ],
            "outputs": []
        },
        {
            "name": "getMinimumAmount",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getMaximumAmount",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "BigUint"
                }
            ]
        },
        {
            "name": "getTreasuryAddress",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "Address"
                }
            ]
        },
        {
            "name": "setState",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "new_state",
                    "type": "State"
                }
            ],
            "outputs": []
        },
        {
            "name": "getState",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "State"
                }
            ]
        },
        {
            "name": "setMainPlayer",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "address",
                    "type": "Address"
                }
            ],
            "outputs": []
        }
    ],
    "esdtAttributes": [],
    "hasCallback": true,
    "types": {
        "Game": {
            "type": "struct",
            "fields": [
                {
                    "name": "id",
                    "type": "u64"
                },
                {
                    "name": "player",
                    "type": "Address"
                },
                {
                    "name": "amount_played",
                    "type": "BigUint"
                },
                {
                    "name": "amount_won",
                    "type": "Option<BigUint>"
                },
                {
                    "name": "timestamp",
                    "type": "u64"
                }
            ]
        },
        "State": {
            "type": "enum",
            "variants": [
                {
                    "name": "Paused",
                    "discriminant": 0
                },
                {
                    "name": "Active",
                    "discriminant": 1
                }
            ]
        }
    }
}
